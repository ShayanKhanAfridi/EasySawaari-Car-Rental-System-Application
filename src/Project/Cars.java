package Project;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.sql.*;
import Project.Car;
import Project.CarManager;


/**
 *
 * @author shayan
 */

public class Cars extends javax.swing.JFrame {
    private CarManager carManager = new CarManager();
    String SUrl = "jdbc:mysql://localhost:3306/car_rental";
    String SUser = "root";
    String SPass = "";
    /**
     * Creates new form Cars
     */
    public Cars() {
        initComponents();
        setupTableListeners();
        updateTable(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        make = new javax.swing.JTextField();
        model = new javax.swing.JTextField();
        colour = new javax.swing.JTextField();
        price = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        addBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        year = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        avComboBox = new javax.swing.JComboBox<>();
        avCheckBox = new javax.swing.JCheckBox();
        search = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        refreshBtn = new javax.swing.JButton();
        sortBox = new javax.swing.JComboBox<>();
        clearBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 153));

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Make");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Model");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Colour");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Price");

        make.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        make.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeActionPerformed(evt);
            }
        });

        model.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        colour.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        colour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colourActionPerformed(evt);
            }
        });

        price.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Car ID", "Make", "Model", "Year", "Colour", "Price", "Available"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable);
        if (jTable.getColumnModel().getColumnCount() > 0) {
            jTable.getColumnModel().getColumn(0).setResizable(false);
            jTable.getColumnModel().getColumn(1).setResizable(false);
            jTable.getColumnModel().getColumn(2).setResizable(false);
            jTable.getColumnModel().getColumn(3).setResizable(false);
            jTable.getColumnModel().getColumn(4).setResizable(false);
            jTable.getColumnModel().getColumn(5).setResizable(false);
            jTable.getColumnModel().getColumn(6).setResizable(false);
        }

        addBtn.setBackground(new java.awt.Color(0, 0, 153));
        addBtn.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        addBtn.setForeground(new java.awt.Color(255, 255, 255));
        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(0, 0, 153));
        deleteBtn.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(255, 255, 255));
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        backBtn.setBackground(new java.awt.Color(255, 255, 0));
        backBtn.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        backBtn.setForeground(new java.awt.Color(255, 0, 0));
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Year");

        year.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("Available");

        avComboBox.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        avComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        avComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avComboBoxActionPerformed(evt);
            }
        });

        avCheckBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        avCheckBox.setText("Available");
        avCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avCheckBoxActionPerformed(evt);
            }
        });

        searchBtn.setBackground(new java.awt.Color(204, 255, 204));
        searchBtn.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        editBtn.setBackground(new java.awt.Color(0, 0, 153));
        editBtn.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        editBtn.setForeground(new java.awt.Color(255, 255, 255));
        editBtn.setText("Edit");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        refreshBtn.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        sortBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        sortBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Price Low to High\t", "Price High to Low" }));
        sortBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortBoxActionPerformed(evt);
            }
        });

        clearBtn.setBackground(new java.awt.Color(204, 255, 204));
        clearBtn.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backBtn)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel2)
                                .addComponent(jLabel6))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(38, 38, 38)
                                    .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(make, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addComponent(model, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(jLabel7))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(colour)
                                .addComponent(price)
                                .addComponent(avComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(clearBtn, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(addBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editBtn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(searchBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(sortBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(avCheckBox)
                        .addContainerGap())
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(refreshBtn)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(20, 20, 20))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(make)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(model, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(year))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(colour, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(avComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1))
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(deleteBtn)
                    .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(backBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(refreshBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(avCheckBox)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn)
                    .addComponent(sortBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("EasySawaari");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(258, 258, 258))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void colourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colourActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_colourActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
       String carMake = make.getText();
    String carModel = model.getText();
    String carColour = colour.getText();
    String carPrice = price.getText();
    String carYear = year.getText();
    String carAvail = avComboBox.getSelectedItem().toString(); // Get selected availability

    if (carMake.isEmpty() || carModel.isEmpty() || carColour.isEmpty() || carPrice.isEmpty() || carYear.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill all fields!");
        return;
    }

    try {
        double priceValue = Double.parseDouble(carPrice); 
        int yearValue = Integer.parseInt(carYear);

        // Use CarManager to handle addition
        carManager.addCar(carMake, carModel, yearValue, carColour, priceValue, carAvail);
        
        updateTable();
        
        // Show success message
        JOptionPane.showMessageDialog(this, "Car added successfully!");
        
        // Clear fields
        make.setText("");
        model.setText("");
        colour.setText("");
        price.setText("");
        year.setText("");
        avComboBox.setSelectedIndex(0);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Year and Price must be valid numbers!");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
    }//GEN-LAST:event_addBtnActionPerformed

    private void makeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeActionPerformed
        
    }//GEN-LAST:event_makeActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        int selectedRow = jTable.getSelectedRow(); 
    if (selectedRow == -1) { 
        JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        return;
    }

    try {
        Object carIdObj = jTable.getValueAt(selectedRow, 0); // Assuming ID is in the first column
        if (carIdObj == null) {
            JOptionPane.showMessageDialog(this, "Car ID not found in the selected row.");
            return;
        }
        int carId = Integer.parseInt(carIdObj.toString()); 

        int confirm = JOptionPane.showConfirmDialog(this,
            "Are you sure you want to delete this car?",
            "Confirm Deletion",
            JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) { // User confirmed deletion
            carManager.deleteCar(carId); // Use CarManager to delete the car
            JOptionPane.showMessageDialog(this, "Car deleted successfully!");

            updateTable();
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid car ID. Please check the selected row.");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        HomePage HomePageFrame = new HomePage();
        HomePageFrame.setVisible(true);
        HomePageFrame.pack();
        HomePageFrame.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_backBtnActionPerformed

    private void avComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_avComboBoxActionPerformed
  
        
    
    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        int selectedRow = jTable.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to edit.");
        return;
    }

    // Fetch selected car details
    int carId = (int) jTable.getValueAt(selectedRow, 0); // 'id' from the first column
    String carMake = make.getText();
    String carModel = model.getText();
    String carColour = colour.getText();
    String carPrice = price.getText();
    String carYear = year.getText();
    String carAvail = avComboBox.getSelectedItem().toString();

    if (carMake.isEmpty() || carModel.isEmpty() || carColour.isEmpty() || carPrice.isEmpty() || carYear.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill all fields!");
        return;
    }

    try {
        double priceValue = Double.parseDouble(carPrice);
        int yearValue = Integer.parseInt(carYear);

        carManager.editCar(carId, carMake, carModel, carId, carColour, priceValue, carAvail);

        JOptionPane.showMessageDialog(this, "Car updated successfully!");

        // Refresh table
        updateTable();

        // Clear input fields
        make.setText("");
        model.setText("");
        colour.setText("");
        price.setText("");
        year.setText("");
        avComboBox.setSelectedIndex(0);

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Year and Price must be valid numbers!");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }

    }//GEN-LAST:event_editBtnActionPerformed

    private void jTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMouseClicked
       
    }//GEN-LAST:event_jTableMouseClicked
    
    private void updateTableWithFilteredCars(ArrayList<Car> filteredCars) {
    DefaultTableModel model = (DefaultTableModel) jTable.getModel();
    model.setRowCount(0); // Clear existing rows

    try {
        // Iterate over the filteredCars list and populate the table
        for (Car car : filteredCars) {
            model.addRow(new Object[]{
                car.getId(),           
                car.getMake(),         
                car.getModel(),         
                car.getYear(),          
                car.getColour(),        
                car.getPrice(),         
                car.getAvailability() 
            });
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error updating table: " + e.getMessage());
    }
}


    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        String searchModel = search.getText().trim();

        // Database connection details
        String SUrl = "jdbc:mysql://localhost:3306/car_rental";
        String SUser = "root";
        String SPass = "";

        ArrayList<Car> filteredCars = new ArrayList<>();

        try {
            // Load the database driver
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(SUrl, SUser, SPass);

            // Prepare SQL query with a placeholder for the model search
            String query = "SELECT * FROM cars WHERE model LIKE ?";
            PreparedStatement pst = con.prepareStatement(query);
            pst.setString(1, "%" + searchModel + "%"); 

            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                Car car = new Car( 
                    rs.getInt("ID"),
                    rs.getString("make"),             
                    rs.getString("model"),          
                    rs.getInt("year"),               
                    rs.getString("colour"),         
                    rs.getDouble("price"),          
                    rs.getString("availability")     
                    );
                filteredCars.add(car);
            }

            // Close resources
            rs.close();
            pst.close();
            con.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error searching cars: " + e.getMessage());
        }

        // Update the table with the filtered list of cars
        updateTableWithFilteredCars(filteredCars);
        search.setText(""); // Clear the search input box
    }//GEN-LAST:event_searchBtnActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
         try {
        // Call fetchCarsFromDatabase using CarManager instance
        carManager.fetchCarsFromDatabase();
        
        // Update the table with the updated list of cars
        updateTableWithFilteredCars(carManager.getCars());
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error refreshing table: " + e.getMessage());
    }
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void avCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avCheckBoxActionPerformed
        boolean filterAvailability = avCheckBox.isSelected();
    
    // Create a list to store filtered cars
    ArrayList<Car> filteredCars = new ArrayList<>();

    try {
        // Establish connection to the database
        Connection con = DriverManager.getConnection(SUrl, SUser, SPass);
        Statement st = con.createStatement();
        
        // Modify the query to fetch only cars based on the availability filter if selected
        String query = "SELECT * FROM cars";
        if (filterAvailability) {
            query += " WHERE availability = 'Yes'"; // Filter only available cars
        }
        
        ResultSet rs = st.executeQuery(query);

        // Map the result set to Car objects
        while (rs.next()) {
            Car car = new Car(
                rs.getInt("ID"),
                rs.getString("make"),
                rs.getString("model"),
                rs.getInt("year"),
                rs.getString("colour"),
                rs.getDouble("price"),
                rs.getString("availability")
            );
            filteredCars.add(car);
        }

        // Close resources
        rs.close();
        st.close();
        con.close();
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error fetching cars: " + e.getMessage());
    }

    // Update the table with the filtered list of cars
    updateTableWithFilteredCars(filteredCars);
    }//GEN-LAST:event_avCheckBoxActionPerformed

    private void sortBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortBoxActionPerformed
        String selectedFilter = sortBox.getSelectedItem().toString();

        ArrayList<Car> sortedCars = new ArrayList<>();

        try {
            // Load MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(SUrl, SUser, SPass);

            String query = "SELECT * FROM cars";
            if (selectedFilter.equals("Price Low to High")) {
                query += " ORDER BY price ASC"; 
            }  else if (selectedFilter.equals("Price High to Low")) {
            query += " ORDER BY price DESC"; 
            }


            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);

            while (rs.next()) {
                Car car = new Car(
                    rs.getInt("ID"),
                    rs.getString("make"),          
                    rs.getString("model"),        
                    rs.getInt("year"),             
                    rs.getString("colour"),       
                    rs.getDouble("price"),          
                    rs.getString("availability")
                    );
                sortedCars.add(car); 
            }

            // Close resources
            rs.close();
            st.close();
            con.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error fetching cars: " + e.getMessage());
        }

        // Update table with sorted data
        updateTableWithFilteredCars(sortedCars);

    }//GEN-LAST:event_sortBoxActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        make.setText("");
        model.setText("");
        colour.setText("");
        price.setText("");
        year.setText("");
        avComboBox.setSelectedIndex(0);
    }//GEN-LAST:event_clearBtnActionPerformed
  
    
    private void setupTableListeners() {
    jTable.addMouseListener(new java.awt.event.MouseAdapter() {
        @Override
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            int selectedRow = jTable.getSelectedRow(); // Get the selected row
            
            // Ensure a valid row is selected
            if (selectedRow >= 0) {
                // Populate text fields
                make.setText(jTable.getValueAt(selectedRow, 1).toString());
                model.setText(jTable.getValueAt(selectedRow, 2).toString());
                year.setText(jTable.getValueAt(selectedRow, 3).toString());
                colour.setText(jTable.getValueAt(selectedRow, 4).toString());
                price.setText(jTable.getValueAt(selectedRow, 5).toString()); // Adjusted index
                // Populate the combo box
                String availability = jTable.getValueAt(selectedRow, 6).toString(); // Assuming column 6 holds availability
                avComboBox.setSelectedItem(availability); // Set the selected item in the combo box
            } else {
                JOptionPane.showMessageDialog(null, "No row selected!");
            }
        }
    });
}

    public void updateTable() {
     try {
            carManager.fetchCarsFromDatabase();
            // Get the table model
            DefaultTableModel model = (DefaultTableModel) jTable.getModel();

            // Clear existing rows
            model.setRowCount(0);

            // Fetch cars from CarManager
            ArrayList<Car> cars = carManager.getCars();

            // Add rows from the ArrayList<Car>
            for (Car car : cars) {
                model.addRow(new Object[]{
                    car.getId(),
                    car.getMake(),
                    car.getModel(),
                    car.getYear(),
                    car.getColour(),
                    car.getPrice(),
                    car.getAvailability()
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error updating table: " + e.getMessage());
            e.printStackTrace();
        }
    
    }

    private void clearFields() {
        make.setText("");
        model.setText("");
        colour.setText("");
        price.setText("");
    }
    
    
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cars().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JCheckBox avCheckBox;
    private javax.swing.JComboBox<String> avComboBox;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JTextField colour;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable;
    private javax.swing.JTextField make;
    private javax.swing.JTextField model;
    private javax.swing.JTextField price;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JTextField search;
    private javax.swing.JButton searchBtn;
    private javax.swing.JComboBox<String> sortBox;
    private javax.swing.JTextField year;
    // End of variables declaration//GEN-END:variables


  
}

