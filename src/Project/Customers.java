/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Project;

import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import javax.swing.JOptionPane;
import java.util.Date;


public class Customers extends javax.swing.JFrame {
    private CarManager carManager = new CarManager();
    
    String SUrl = "jdbc:mysql://localhost:3306/car_rental";
    String SUser = "root";
    String SPass = "";
    
    /**
     * Creates new form Customers
     */
    public Customers() {
        initComponents();
        updateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        make = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        rentItNow = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        avCheckBox2 = new javax.swing.JCheckBox();
        searchBtn1 = new javax.swing.JButton();
        search1 = new javax.swing.JTextField();
        sortComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        eDate = new com.toedter.calendar.JDateChooser();
        sDate = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        make.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 153));

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Make", "Model", "Year", "Colour", "Price", "Available"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getColumnModel().getColumn(6).setResizable(false);
        }

        rentItNow.setBackground(new java.awt.Color(204, 0, 0));
        rentItNow.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        rentItNow.setForeground(new java.awt.Color(255, 255, 255));
        rentItNow.setText("Rent it Now");
        rentItNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentItNowActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 255, 0));
        jButton2.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 0, 0));
        jButton2.setText("Logout");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        avCheckBox2.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        avCheckBox2.setText("Available");
        avCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avCheckBox2ActionPerformed(evt);
            }
        });

        searchBtn1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        searchBtn1.setText("Search");
        searchBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtn1ActionPerformed(evt);
            }
        });

        sortComboBox1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        sortComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Price Low to High", "Price High to Low" }));
        sortComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Rental Portal");

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton3.setText("Refresh");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        eDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                eDatePropertyChange(evt);
            }
        });

        sDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                sDateMouseEntered(evt);
            }
        });
        sDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sDatePropertyChange(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel2.setText("Start Date");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel3.setText("End Date");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(searchBtn1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(45, 45, 45)
                        .addComponent(sortComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(avCheckBox2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rentItNow)
                        .addGap(76, 76, 76)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sDate, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                            .addComponent(eDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(avCheckBox2)
                    .addComponent(searchBtn1)
                    .addComponent(search1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sortComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(sDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(7, 7, 7)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(eDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(rentItNow, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(63, 63, 63))
        );

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("EasySawaari");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(293, 293, 293)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rentItNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentItNowActionPerformed
        int selectedRow = jTable1.getSelectedRow(); // Get selected row index

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a car to rent.", "No Car Selected", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Retrieve selected car details
    int carId = Integer.parseInt(jTable1.getValueAt(selectedRow, 0).toString()); // Assuming carID is in the first column
    double carPrice = Double.parseDouble(jTable1.getValueAt(selectedRow, 5).toString()); // Assuming price is in the 6th column
    String availability = jTable1.getValueAt(selectedRow, 6).toString(); // Assuming availability is in the 7th column

    // Check availability
    if ("No".equalsIgnoreCase(availability)) {
        JOptionPane.showMessageDialog(this, "This car is unavailable.", "Car Unavailable", JOptionPane.INFORMATION_MESSAGE);

        return;
    }

    // Ensure the end date is selected
    Date enDDate = eDate.getDate(); // End date from JDateChooser
    Date startDate = sDate.getDate();

    if (enDDate == null) {
        JOptionPane.showMessageDialog(this, "Please select a date.", "Missing Information", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    long diffInMillies = Math.abs(enDDate.getTime() - startDate.getTime());
    int rentalDays = (int) (diffInMillies / (1000 * 60 * 60 * 24));
    
    Date currentDate = new Date(); // Current date
    if (startDate.before(currentDate)) {
        JOptionPane.showMessageDialog(this, "The start date cannot be in the past.", "Date Error", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    if (rentalDays == 0) {
        JOptionPane.showMessageDialog(this, "The minimum duration to rent a car is 1 day.", "Duration Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Proceed to RentForm only if the car is available
    RentForm rentFormFrame = new RentForm(carId, carPrice, enDDate, startDate);
    rentFormFrame.setVisible(true);
    rentFormFrame.pack();
    rentFormFrame.setLocationRelativeTo(null);
    this.dispose();
    }//GEN-LAST:event_rentItNowActionPerformed

    private void searchBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtn1ActionPerformed
        String searchModel = search1.getText().trim();

        ArrayList<Car> filteredCars = new ArrayList<>();

        try {
            // Load the database driver
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(SUrl, SUser, SPass);

            // Prepare SQL query with a placeholder for the model search
            String query = "SELECT * FROM cars WHERE model LIKE ?";
            PreparedStatement pst = con.prepareStatement(query);
            pst.setString(1, "%" + searchModel + "%"); // Add wildcards for partial matching

            ResultSet rs = pst.executeQuery();

            // Process the results and populate the filteredCars list
            while (rs.next()) {
                Car car = new Car( 
                    rs.getInt("ID"),
                    rs.getString("make"),             
                    rs.getString("model"),          
                    rs.getInt("year"),               
                    rs.getString("colour"),         
                    rs.getDouble("price"),          
                    rs.getString("availability")     
                    );
                filteredCars.add(car);
            }

            // Close resources
            rs.close();
            pst.close();
            con.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error searching cars: " + e.getMessage());
        }

        // Update the table with the filtered list of cars
        updateTableWithFilteredCars(filteredCars);
        search1.setText(""); // Clear the search input box
    }//GEN-LAST:event_searchBtn1ActionPerformed

    private void avCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avCheckBox2ActionPerformed
        boolean filterAvailability = avCheckBox2.isSelected();
    
    // Create a list to store filtered cars
    ArrayList<Car> filteredCars = new ArrayList<>();

    try {
        // Establish connection to the database
        Connection con = DriverManager.getConnection(SUrl, SUser, SPass);
        Statement st = con.createStatement();
        
        // Modify the query to fetch only cars based on the availability filter if selected
        String query = "SELECT * FROM cars";
        if (filterAvailability) {
            query += " WHERE availability = 'Yes'"; // Filter only available cars
        }
        
        ResultSet rs = st.executeQuery(query);

        // Map the result set to Car objects
        while (rs.next()) {
            Car car = new Car(
                rs.getInt("ID"),
                rs.getString("make"),
                rs.getString("model"),
                rs.getInt("year"),
                rs.getString("colour"),
                rs.getDouble("price"),
                rs.getString("availability")
            );
            filteredCars.add(car);
        }

        // Close resources
        rs.close();
        st.close();
        con.close();
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error fetching cars: " + e.getMessage());
    }

    // Update the table with the filtered list of cars
    updateTableWithFilteredCars(filteredCars);
    }//GEN-LAST:event_avCheckBox2ActionPerformed

    private void sortComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortComboBox1ActionPerformed
        String selectedFilter = sortComboBox1.getSelectedItem().toString();

        ArrayList<Car> sortedCars = new ArrayList<>();

        try {
            // Load MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(SUrl, SUser, SPass);

            String query = "SELECT * FROM cars";
            if (selectedFilter.equals("Price Low to High")) {
                query += " ORDER BY price ASC"; 
            }  else if (selectedFilter.equals("Price High to Low")) {
            query += " ORDER BY price DESC"; 
            }


            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);

            while (rs.next()) {
                Car car = new Car(
                    rs.getInt("ID"),
                    rs.getString("make"),          
                    rs.getString("model"),        
                    rs.getInt("year"),             
                    rs.getString("colour"),       
                    rs.getDouble("price"),          
                    rs.getString("availability")
                    );
                sortedCars.add(car); 
            }

            // Close resources
            rs.close();
            st.close();
            con.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error fetching cars: " + e.getMessage());
        }

        // Update table with sorted data
        updateTableWithFilteredCars(sortedCars);
    }//GEN-LAST:event_sortComboBox1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
         try {
        // Call fetchCarsFromDatabase using CarManager instance
        carManager.fetchCarsFromDatabase();
        
        // Update the table with the updated list of cars
        updateTableWithFilteredCars(carManager.getCars());

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error refreshing table: " + e.getMessage());
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void sDateMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sDateMouseEntered
        
    }//GEN-LAST:event_sDateMouseEntered

    private void sDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sDatePropertyChange
        validateDates();
    }//GEN-LAST:event_sDatePropertyChange

    private void eDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_eDatePropertyChange
        validateDates();
    }//GEN-LAST:event_eDatePropertyChange

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Start_Menu MenuFrame = new Start_Menu();
        MenuFrame.setVisible(true);
        MenuFrame.pack();
        MenuFrame.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void validateDates() {
        Date startDate = sDate.getDate(); // Get selected start date
        Date endDate = eDate.getDate();     // Get selected end date

        if (startDate != null && endDate != null) { // Ensure both dates are selected
            if (endDate.before(startDate)) { // Check if end date is before start date
                JOptionPane.showMessageDialog(this, 
                    "End date cannot be before the start date!", 
                    "Invalid Date Selection", 
                    JOptionPane.ERROR_MESSAGE);
                eDate.setDate(null);
            }
        }
    }
    
    public void updateTable() {
     try {
            carManager.fetchCarsFromDatabase();
            // Get the table model
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

            // Clear existing rows
            model.setRowCount(0);

            // Fetch cars from CarManager
            ArrayList<Car> cars = carManager.getCars();

            // Add rows from the ArrayList<Car>
            for (Car car : cars) {
                model.addRow(new Object[]{
                    car.getId(),
                    car.getMake(),
                    car.getModel(),
                    car.getYear(),
                    car.getColour(),
                    car.getPrice(),
                    car.getAvailability()
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error updating table: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private void updateTableWithFilteredCars(ArrayList<Car> filteredCars) {
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0); // Clear existing rows

    try {
        // Iterate over the filteredCars list and populate the table
        for (Car car : filteredCars) {
            model.addRow(new Object[]{
                car.getId(),            // Car ID
                car.getMake(),          // Make
                car.getModel(),         // Model
                car.getYear(),          // Year
                car.getColour(),        // Colour
                car.getPrice(),         // Price
                car.getAvailability()   // Availability
            });
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error updating table: " + e.getMessage());
    }
}
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Customers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Customers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Customers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Customers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Customers().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox avCheckBox2;
    private com.toedter.calendar.JDateChooser eDate;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    private javax.swing.JTextField make;
    private javax.swing.JButton rentItNow;
    private com.toedter.calendar.JDateChooser sDate;
    private javax.swing.JTextField search1;
    private javax.swing.JButton searchBtn1;
    private javax.swing.JComboBox<String> sortComboBox1;
    // End of variables declaration//GEN-END:variables
}
